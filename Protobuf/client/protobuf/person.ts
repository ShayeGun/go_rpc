// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: person.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "test";

export enum PhoneType {
  PHONE_TYPE_UNSPECIFIED = 0,
  PHONE_TYPE_MOBILE = 1,
  PHONE_TYPE_HOME = 2,
  PHONE_TYPE_WORK = 3,
  UNRECOGNIZED = -1,
}

export function phoneTypeFromJSON(object: any): PhoneType {
  switch (object) {
    case 0:
    case "PHONE_TYPE_UNSPECIFIED":
      return PhoneType.PHONE_TYPE_UNSPECIFIED;
    case 1:
    case "PHONE_TYPE_MOBILE":
      return PhoneType.PHONE_TYPE_MOBILE;
    case 2:
    case "PHONE_TYPE_HOME":
      return PhoneType.PHONE_TYPE_HOME;
    case 3:
    case "PHONE_TYPE_WORK":
      return PhoneType.PHONE_TYPE_WORK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PhoneType.UNRECOGNIZED;
  }
}

export function phoneTypeToJSON(object: PhoneType): string {
  switch (object) {
    case PhoneType.PHONE_TYPE_UNSPECIFIED:
      return "PHONE_TYPE_UNSPECIFIED";
    case PhoneType.PHONE_TYPE_MOBILE:
      return "PHONE_TYPE_MOBILE";
    case PhoneType.PHONE_TYPE_HOME:
      return "PHONE_TYPE_HOME";
    case PhoneType.PHONE_TYPE_WORK:
      return "PHONE_TYPE_WORK";
    case PhoneType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Person {
  name: string;
  /** Unique ID number for this person. */
  id: number;
  email: string;
  phones: Person_PhoneNumber[];
  lastUpdated: Date | undefined;
}

export interface Person_PhoneNumber {
  number: string;
  type: PhoneType;
}

function createBasePerson(): Person {
  return { name: "", id: 0, email: "", phones: [], lastUpdated: undefined };
}

export const Person: MessageFns<Person> = {
  encode(message: Person, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    for (const v of message.phones) {
      Person_PhoneNumber.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.lastUpdated !== undefined) {
      Timestamp.encode(toTimestamp(message.lastUpdated), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Person {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePerson();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.phones.push(Person_PhoneNumber.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lastUpdated = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Person {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      phones: globalThis.Array.isArray(object?.phones)
        ? object.phones.map((e: any) => Person_PhoneNumber.fromJSON(e))
        : [],
      lastUpdated: isSet(object.lastUpdated) ? fromJsonTimestamp(object.lastUpdated) : undefined,
    };
  },

  toJSON(message: Person): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.phones?.length) {
      obj.phones = message.phones.map((e) => Person_PhoneNumber.toJSON(e));
    }
    if (message.lastUpdated !== undefined) {
      obj.lastUpdated = message.lastUpdated.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Person>, I>>(base?: I): Person {
    return Person.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Person>, I>>(object: I): Person {
    const message = createBasePerson();
    message.name = object.name ?? "";
    message.id = object.id ?? 0;
    message.email = object.email ?? "";
    message.phones = object.phones?.map((e) => Person_PhoneNumber.fromPartial(e)) || [];
    message.lastUpdated = object.lastUpdated ?? undefined;
    return message;
  },
};

function createBasePerson_PhoneNumber(): Person_PhoneNumber {
  return { number: "", type: 0 };
}

export const Person_PhoneNumber: MessageFns<Person_PhoneNumber> = {
  encode(message: Person_PhoneNumber, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.number !== "") {
      writer.uint32(10).string(message.number);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Person_PhoneNumber {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePerson_PhoneNumber();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Person_PhoneNumber {
    return {
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      type: isSet(object.type) ? phoneTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: Person_PhoneNumber): unknown {
    const obj: any = {};
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.type !== 0) {
      obj.type = phoneTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Person_PhoneNumber>, I>>(base?: I): Person_PhoneNumber {
    return Person_PhoneNumber.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Person_PhoneNumber>, I>>(object: I): Person_PhoneNumber {
    const message = createBasePerson_PhoneNumber();
    message.number = object.number ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
